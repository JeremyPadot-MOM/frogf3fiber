/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import PropTypes from 'prop-types'
import { useLoader, useFrame } from 'react-three-fiber'

import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'


export default function Model(props) {
  const { position, rotation, scale, computerControlled, keyPress } = props
  const group = useRef()

  useFrame(state => {
    if (computerControlled) {
      group.current.position.x = ((1 + Math.sin(state.clock.getElapsedTime())) / 2) * 5
      group.current.position.y = ((1 + Math.sin(state.clock.getElapsedTime())) / 2) * 2
      group.current.rotation.z += 0.01
    } else {
      // User controlled
      switch (keyPress) {
        case 'left':
          group.current.position.x -= 0.5
          break;
        case 'right':
          group.current.position.x += 0.5
          break;
        case 'up':
          group.current.position.y += 0.5
          break;
        case 'down':
          group.current.position.y -= 0.5
          break;
        default: 
          break;
      }
    }
  })

  const { nodes, materials } = useLoader(GLTFLoader, '/models/deadgoblins.glb')
  return (
      <group 
        ref={group} 
        position={position} 
        scale={scale}
        rotation={rotation} 
        dispose={null} 
        onPointerDown={() => {
          console.log('Over the goblin...')
          // group.current.position.x += 0.1
        }}>
        <mesh material={materials.palette} geometry={nodes.mesh_0.geometry} />
      </group>
  )
}

Model.propTypes = {
  position: PropTypes.array,
  rotation: PropTypes.array,
  scale: PropTypes.array,
  computerControlled: PropTypes.bool,
  keyPress: PropTypes.string,
}

Model.defaultProps = {
  position: [0, -10, 0],
  rotation: [0, 0, 0],
  scale: [1, 1, 1],
  computerControlled: false,
  keyPress: null
}